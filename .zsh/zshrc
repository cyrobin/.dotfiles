# Cyril Robin's ~/.zshrc
# Inspired from oh-my-zsh template
# and Alexis de Lattre (http://formation-debian.via.ecp.fr/)

################
# 0. Oh-My-ZSH #
################

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.zsh/oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
#ZSH_THEME="robbyrussell"
#ZSH_THEME="aussiegeek"
#ZSH_THEME="avit"
#ZSH_THEME="bira"
#ZSH_THEME="blinks"
#ZSH_THEME="candy"
#ZSH_THEME="clean"
source ~/.zsh/theme-choice

# Example aliases
alias zshcf="vim ~/.zsh/zshrc"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git last-working-dir vi-mode)
# tmux ? (get a pb)
# tmuxinator ?

source $ZSH/oh-my-zsh.sh

################
# 1. Les alias #
################

# Gestion du 'ls' : couleur & ne touche pas aux accents
alias ls='ls --classify --tabsize=0 --literal --color=auto --show-control-chars --human-readable'

# Raccourcis pour 'ls'
alias ll='ls -alhF'
alias la='ls -Ah'
alias lr='ls -Rh'
alias l='ls -CFh'
alias llra="ll -R"

# Demande confirmation avant d'√©craser un fichier
# et prise en compte de r√©pertoires (r√©cursif)
alias cp='cp --interactive -r'
alias mv='mv --interactive'
alias rm='rm --interactive -r'

# Quelques alias pratiques
alias c='clear'
alias less='less --quiet'
alias s='cd ..'
alias df='df --human-readable'
alias du='du --human-readable'
alias md='mkdir'
alias rd='rmdir'
alias upgrade='sudo apt-get update && sudo apt-get upgrade && sudo apt-get clean'
alias pd="popd"
alias nd="pushd"

alias srczsh="source ~/.zshrc"

alias vim="vim -p"
alias view="view -p"
alias svim="sudo vim"
alias vd="vimdiff"
alias vimcf="vim ~/.vim/vimrc"

# git alias are handle by oh-my-zsh git plugin

# alias for todo.txt
alias td="${HOME}/dev/scripts/todo.txt-cli/todo.sh -ant -d ${HOME}/.todo/todo.cfg"
alias d="td"

# alias for Quick Calculator qc
# a shell script using python to compute math in command line
alias qc="${HOME}/dev/scripts/qc.sh"

# alias for bd
alias bd=". bd -s"

# alias for swipl (avoid conflicts at compilation)
alias swipl='export LANG=""; swipl'

# alias for acICP (LAAS / ACTION project"
alias acICP='export LC_CTYPE="fr_FR.utf8"; echo "export LC_CTYPE=$LC_CTYPE" ; acICP'

# alias rsync
alias dotsync="rsync -av \
    ~/.zsh --exclude oh-my-zsh/ \
    ~/.gitconfig \
    ~/.todo ~/.conky \
    ~/.mutt --exclude cache/ \
    ~/.urlview \
    ~/.cmus --exclude cache \
    ~/.lesskey \
    ~/.dotfiles/"

# Mutt alias
alias ml="mutt -F ~/.mutt/muttrc_laas"
alias mg="mutt -F ~/.mutt/muttrc_gmail"
#alias m='mutt -y'

# awesome
alias awesomecf="vim ~/.config/awesome/rc.lua"

# programmation
alias p3="python3"
alias p2="python2.7"

# libreoffice
alias lo="libreoffice"

#######################################
# 2. D√©finition des touches #
#######################################

# Use vim keybindings 
# (put this before the other bindings to avoid overwriting)
bindkey -v

# Exemple : ma touche HOME, cf  man termcap, est codifiee K1 (upper left
# key  on keyboard)  dans le  /etc/termcap.  En me  referant a  l'entree
# correspondant a mon terminal (par exemple 'linux') dans ce fichier, je
# lis :  K1=\E[1~, c'est la sequence  de caracteres qui sera  envoyee au
# shell. La commande bindkey dit simplement au shell : a chaque fois que
# tu rencontres telle sequence de caractere, tu dois faire telle action.
# La liste des actions est disponible dans "man zshzle".

# Correspondance touches-fonction
bindkey ''    beginning-of-line       # Home
bindkey "\e[1~" beginning-of-line
bindkey "\e[H"  beginning-of-line
bindkey ''    end-of-line             # End
bindkey "\e[4~" end-of-line
bindkey "\e[F"  end-of-line
bindkey ''    delete-char             # Del
bindkey '[3~' delete-char
bindkey '[2~' overwrite-mode          # Insert
bindkey '[5~' history-search-backward # PgUp
bindkey '[6~' history-search-forward  # PgDn

# Prise en charge des touches [d√©but], [fin] et autres
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char

# Vim keybindings for b√©po
if [[ $DISPLAY != '' && `setxkbmap -print|grep bepo` != '' ]]; then

    #If available, set the layout to b√©po
    export MYLAYOUT="bepo"

    bindkey -a c vi-backward-char
    bindkey -a r vi-forward-char
    bindkey -a t vi-down-line-or-history
    bindkey -a s vi-up-line-or-history
    bindkey -a $ vi-end-of-line
    bindkey -a 0 vi-digit-or-beginning-of-line 
    bindkey -a h vi-change
    bindkey -a H vi-change-eol
    bindkey -a dd vi-change-whole-line
    bindkey -a l vi-replace-chars
    bindkey -a L vi-replace
    bindkey -a k vi-substitute
else
    #Default layout is qwerty/azerty
    export MYLAYOUT="qwerty"
fi
export MYLAYOUT="bepo"
#export MYLAYOUT="qwerty"

###########################################
# 3. Options de zsh (cf 'man zshoptions') #
###########################################

# Je ne veux JAMAIS de beeps 
unsetopt beep
unsetopt hist_beep
unsetopt list_beep
xset b off
setterm -blength 0

# >| doit √™tre utilis√©s pour pouvoir √©craser un fichier d√©j√† existant ;
# le fichier ne sera pas √©cras√© avec '>'
#unsetopt clobber
# Ctrl+D est √©quivalent √† 'logout'
#unsetopt ignore_eof
# Affiche le code de sortie si diff√©rent de '0'
setopt print_exit_value
# Demande confirmation pour 'rm *'
unsetopt rm_star_silent
# Correction orthographique des commandes
# D√©sactiv√© car, contrairement √† ce que dit le "man", il essaye de
# corriger les commandes avant de les hasher
#setopt correct
setopt nocorrectall
# Si on utilise des jokers dans une liste d'arguments, retire les jokers
# qui ne correspondent √† rien au lieu de donner une erreur
setopt nullglob

# Sch√©mas de compl√©tion

# - Sch√©ma A :
# 1√®re tabulation : compl√®te jusqu'au bout de la partie commune
# 2√®me tabulation : propose une liste de choix
# 3√®me tabulation : compl√®te avec le 1er item de la liste
# 4√®me tabulation : compl√®te avec le 2√®me item de la liste, etc...
# -> c'est le sch√©ma de compl√©tion par d√©faut de zsh.

# Sch√©ma B :
# 1√®re tabulation : propose une liste de choix et compl√®te avec le 1er item
#                   de la liste
# 2√®me tabulation : compl√®te avec le 2√®me item de la liste, etc...
# Si vous voulez ce sch√©ma, d√©commentez la ligne suivante :
setopt menu_complete

# Sch√©ma C :
# 1√®re tabulation : compl√®te jusqu'au bout de la partie commune et
#                   propose une liste de choix
# 2√®me tabulation : compl√®te avec le 1er item de la liste
# 3√®me tabulation : compl√®te avec le 2√®me item de la liste, etc...
# Ce sch√©ma est le meilleur √† mon go√ªt !
# Si vous voulez ce sch√©ma, d√©commentez la ligne suivante :
#unsetopt list_ambiguous

# Options de compl√©tion
# Quand le dernier caract√®re d'une compl√©tion est '/' et que l'on
# tape 'espace' apr√®s, le '/' est effac√©
setopt auto_remove_slash
# Ne fait pas de compl√©tion sur les fichiers et r√©pertoires cach√©s
unsetopt glob_dots

# Traite les liens symboliques comme il faut
setopt chase_links

# Quand l'utilisateur commence sa commande par '!' pour faire de la
# compl√©tion historique, il n'ex√©cute pas la commande imm√©diatement
# mais il √©crit la commande dans le prompt
setopt hist_verify
# Si la commande est invalide mais correspond au nom d'un sous-r√©pertoire
# ex√©cuter 'cd sous-r√©pertoire'
#setopt auto_cd
# L'ex√©cution de "cd" met le r√©pertoire d'o√π l'on vient sur la pile
setopt auto_pushd
# Ignore les doublons dans la pile
setopt pushd_ignore_dups
# N'affiche pas la pile apr√®s un "pushd" ou "popd"
setopt pushd_silent
# "pushd" sans argument = "pushd $HOME"
setopt pushd_to_home

# Les jobs qui tournent en t√¢che de fond sont nic√© √† '0'
unsetopt bg_nice
# N'envoie pas de "HUP" aux jobs qui tournent quand le shell se ferme
unsetopt hup


###############################################
# 4. Param√®tres de l'historique des commandes #
###############################################

# The history is shared between all zshell
# And only the last occurrence of duplicates
setopt histignorealldups sharehistory

# Keep 5000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=5000
SAVEHIST=5000
HISTFILE=~/.zsh_history

# Ajoute l'historique √† la fin de l'ancien fichier
setopt append_history

# Chaque ligne est ajout√©e dans l'historique √† mesure qu'elle est tap√©e
setopt inc_append_history

# Ne stocke pas  une ligne dans l'historique si elle  est identique √† la
# pr√©c√©dente
setopt hist_ignore_dups

# Supprime les  r√©p√©titions dans le fichier  d'historique, ne conservant
# que la derni√®re occurrence ajout√©e
#setopt hist_ignore_all_dups

# Supprime les  r√©p√©titions dans l'historique lorsqu'il  est plein, mais
# pas avant
setopt hist_expire_dups_first

# N'enregistre  pas plus d'une fois  une m√™me ligne, quelles  que soient
# les options fix√©es pour la session courante
setopt hist_save_no_dups

# La recherche dans  l'historique avec l'√©diteur de commandes  de zsh ne
# montre  pas  une m√™me  ligne  plus  d'une fois,  m√™me  si  elle a  √©t√©
# enregistr√©e
setopt hist_find_no_dups


###########################################
# 5. Compl√©tion des options des commandes #
###########################################

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'


###########################################
# 6. Variables and preferences settings   #
###########################################

# Time zone
# use for the system:
#   sudo dpkg-reconfigure tzdata
#   or tzselect
# or locally
export TZ="Europe/Paris"
#export TZ="Australia/Sydney"

# Vim is awesome ! :-)
export EDITOR="vim"

# Language and character encodage
export LANG=en_GB.utf-8
export LANGUAGE=en_GB.utf-8
#export LANG=en_US.utf-8
#export LANG="fr_FR.ISO8859-1"
#export LANG=""

export PYTHONPATH="/usr/bin/:/usr/lib:/usr/include"
export PYTHONPATH="usr/lib/python3:/usr/include/python3":$PYTHONPATH

export CHEATCOLORS=tru

###########################################
# 7. LAAS Specific Variables              #
###########################################

# Create files writable by group by default
umask 2

# GIT : Set this if you are using a different login on your laptop
export GIT_LAAS_USER=crobin

alias morse="morse -c" #color

# OpenRobots / robotpkg
export ROBOTPKG_BASE=${HOME}/LAAS/workspace/tools/openrobots
export PATH=${ROBOTPKG_BASE}/bin:${ROBOTPKG_BASE}/sbin:${PATH}
export LD_LIBRARY_PATH="${ROBOTPKG_BASE}/lib:${ROBOTPKG_BASE}/lib/openprs:${LD_LIBRARY_PATH}"
export PKG_CONFIG_PATH="${ROBOTPKG_BASE}/lib/pkgconfig:${PKG_CONFIG_PATH}"
export PYTHONPATH=${ROBOTPKG}/lib/python3.3/site-packages:${PYTHONPATH}

# ROS
#export ROS_OS_OVERRIDE=debian:squeeze
#LANG=en_US.utf-8
export ROS_PACKAGE_PATH=/home/crobin/LAAS/workspace/tools/openrobots/opt/ros/fuerte/
export ROS_MASTER_URI=http://localhost:11311
export PATH="$PATH:/home/crobin/LAAS/workspace/tools/openrobots/opt/ros/fuerte/bin"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/home/crobin/LAAS/workspace/tools/openrobots/opt/ros/fuerte/lib/pkgconfig"
export PYTHONPATH="$PYTHONPATH:/home/crobin/LAAS/workspace/tools/openrobots/opt/ros/fuerte/lib/python2.7/site-packages"
export TCLSERV_MODULE_PATH="${TCLSERV_MODULE_PATH}:/home/crobin/dev/lib/tclserv:${ROBOTPKG_BASE}/lib/tclserv"

# For demo genom3
#export PATH="$PATH:/home/crobin/LAAS/Courses/genom3_201310304/dummy-prefix/bin"
#export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/home/crobin/LAAS/Courses/genom3_201310304/dummy-prefix/lib/pkgconfig"
#export PYTHONPATH="$PYTHONPATH:/home/crobin/LAAS/Courses/genom3_201310304/dummy-prefix/lib/python2.7/site-packages"


# Morse
#export MORSE_BLENDER=/home/crobin/LAAS/workspace/tools/blender-2.64a-linux-glibc27-x86_64/blender
#export MORSE_ROOT=${HOME}/LAAS/workspace/tools/

# Environment for Jafar
export JAFAR_DIR=${HOME}/LAAS/workspace/jafar
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${JAFAR_DIR}/lib/x86_64-linux-gnu

# CVS Environment variables
#export CVSROOT=ssh://crobin@ncvs.laas.fr/cvs/action
export CVSROOT=:ext:crobin@ncvs.laas.fr:/cvs/action
export CVS_RSH=ssh
export CVSEDITOR=vim

# tkeclipse
export PATH="$PATH:/home/crobin/LAAS/workspace/tools/tkeclipse/bin/x86_64_linux"

# hyper
export HYPER_ROOT_ADDR="127.0.0.1:4242"
#export HYPER_ROOT_ADDR="localhost:4242"
export HYPER_ROOT="/home/crobin/dev/"
#export HYPER_ROOT=${ROBOTPKG_BASE}
export PYTHONPATH="/home/crobin/LAAS/workspace/tools/morse-action:${ROBOTPKG_BASE}/share/modules/python:${ROBOTPKG_BASE}/lib/python3.3/site-packages:$PYTHONPATH"

export BOOST_LIBRARYDIR="/usr/lib/x86_64-linux-gnu/:${BOOST_LIBRARY_DIR}"

export RUBYLIB="/home/crobin/LAAS/workspace/tools/analysis:$RUBYLIB"

# ACTION
export ACTION_HOME=/home/crobin/LAAS/workspace/tools
export MORSE_RESOURCE_PATH="${HOME}/LAAS/workspace/tools/morse-action/:${MORSE_RESOURCE_PATH}"
export PYTHONPATH="${HOME}/LAAS/workspace/tools/morse-action/:${PYTHONPATH}"
export PYTHONPATH="${HOME}/LAAS/workspace/tools/openrobots/share/modules/python/:${PYTHONPATH}"
#alias morse="env LD_LIBRARY_PATH=${ROBOTPKG_BASE}/lib morse"
export CMAKE_PREFIX_PATH=${ROBOTPKG_BASE}:${CMAKE_PREFIX_PATH}
export PYTHONPATH=${ACTION_HOME}/action-scripts:${PYTHONPATH}

# Simulation ACTION Mono AAV
export LUA_PATH="?;?.lua;$ROBOTPKG_BASE/lib/lua/rfsm/?.lua;$ROBOTPKG_BASE/share/lua/5.1/?.lua;/usr/share/lua/5.1/?.lua;/usr/lib/lua/5.1/?.lua"

######################### /LAAS ####################################

# Here at the end because order matters !
export PATH="${HOME}/dev/bin:${PATH}"
export LD_LIBRARY_PATH="${HOME}/dev/lib:${LD_LIBRARY_PATH}"
export LD_LIBRARY_PATH="${HOME}/dev/lib/i386-linux-gnu:${LD_LIBRARY_PATH}"
export PKG_CONFIG_PATH="${HOME}/dev/lib/pkgconfig:${PKG_CONFIG_PATH}"
export INCLUDE="${HOME}/dev/include:${INCLUDE}"
export CMAKE_INCLUDE_PATH="${HOME}/dev/include:${INCLUDE}"
export CMAKE_INSTALL_PREFIX="${HOME}/dev/"
#export PYTHONPATH="${PYTHONPATH}:/usr/lib/python3/dist-packages:/usr/lib/python3.3"
#export PYTHONPATH="${PYTHONPATH}:/usr/local/bin/:/usr/local/lib:/usr/local/include:/usr/local/lib/python3/dist-packages/"
export PYTHONPATH="${HOME}/dev/lib/python2.7/dist-packages:${HOME}/dev/lib/python3/dist-packages:$PYTHONPATH"


export ROBOT=minnie

# Prolog : eclipse
export PATH=$PATH:/home/crobin/dev/src/eclipse_prolog/bin/x86_64_linux
